generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String?
  phoneNumber   String?
  password      String?
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App relations
  bookings      Booking[]
  notifications Notification[]
  feedback      Feedback[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Operator {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  licenseNo   String   @unique
  contactInfo String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  buses  Bus[]
  routes Route[]

  @@map("operators")
}

model Bus {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  busNumber  String   @unique
  capacity   Int
  busType    String
  isActive   Boolean  @default(true)
  operatorId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  operator  Operator   @relation(fields: [operatorId], references: [id])
  positions Position[]
  schedules Schedule[]
  bookings  Booking[]

  @@map("buses")
}

model Route {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  routeNumber   String   @unique
  startLocation String
  endLocation   String
  distance      Float?
  estimatedTime Int?
  isActive      Boolean  @default(true)
  operatorId    String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  operator  Operator   @relation(fields: [operatorId], references: [id])
  stops     Stop[]
  schedules Schedule[]
  fares     Fare[]

  @@map("routes")
}

model Stop {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  latitude  Float
  longitude Float
  order     Int
  routeId   String   @db.ObjectId
  createdAt DateTime @default(now())

  route Route @relation(fields: [routeId], references: [id])

  @@map("stops")
}

model Schedule {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  routeId       String   @db.ObjectId
  busId         String   @db.ObjectId
  departureTime String
  arrivalTime   String
  frequency     Int?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  route    Route     @relation(fields: [routeId], references: [id])
  bus      Bus       @relation(fields: [busId], references: [id])
  bookings Booking[]

  @@map("schedules")
}

model Position {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  busId     String   @db.ObjectId
  latitude  Float
  longitude Float
  speed     Float?
  heading   Float?
  timestamp DateTime @default(now())

  bus Bus @relation(fields: [busId], references: [id])

  @@map("positions")
}

model Booking {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  scheduleId     String        @db.ObjectId
  busId          String        @db.ObjectId
  seatNumber     Int?
  passengerName  String
  passengerPhone String
  bookingDate    DateTime      @default(now())
  journeyDate    DateTime
  status         BookingStatus @default(CONFIRMED)
  totalAmount    Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  schedule Schedule  @relation(fields: [scheduleId], references: [id])
  bus      Bus       @relation(fields: [busId], references: [id])
  payment  Payment?
  ticket   Ticket?
  feedback Feedback?

  @@map("bookings")
}

model Ticket {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  bookingId    String   @unique @db.ObjectId
  ticketNumber String   @unique
  qrCode       String?
  isValid      Boolean  @default(true)
  isUsed       Boolean  @default(false)
  createdAt    DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("tickets")
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId       String        @unique @db.ObjectId
  amount          Float
  currency        String        @default("LKR")
  method          PaymentMethod
  status          PaymentStatus @default(PENDING)
  transactionId   String?
  stripeSessionId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

model Fare {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  routeId   String   @db.ObjectId
  busType   String
  basePrice Float
  currency  String   @default("LKR")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  route Route @relation(fields: [routeId], references: [id])

  @@map("fares")
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?          @db.ObjectId
  title       String
  message     String
  type        NotificationType
  isRead      Boolean          @default(false)
  isBroadcast Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  bookingId String   @unique @db.ObjectId
  rating    Int      @default(5)
  comment   String?
  category  String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("feedback")
}

enum Role {
  USER
  OPERATOR
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_WALLET
  BANK_TRANSFER
  CASH
}

enum NotificationType {
  BOOKING_CONFIRMATION
  PAYMENT_SUCCESS
  SCHEDULE_UPDATE
  ROUTE_CHANGE
  GENERAL
  EMERGENCY
}
